"""
Django settings for notepik project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-1!)p844c*n$#%&*35nq42*z5v%(q!2uw@z*p_0-z^9d9ws&6h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]




MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'notepik.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = 'notepik.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': "notepikdb",
        "USER": "notepikadmin",
        "PASSWORD": "testpassword", # TODO: Secure password
        "HOST": "localhost",
        "PORT": "5433",
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/


#********************************************************************************
#********************************************************************************
#***************************** CUSTOM SETTINGS **********************************
#********************************************************************************
#********************************************************************************

#******************************** CONSTANTS ***********************************
# For assigning the note to a temporary author
TEMPORARY_AUTHOR_EMAIL = "temporary_author@email.com"
TEMPORARY_AUTHOR_PASSWORD = "jaoculkjsauqklds321sa"

#******************************** APPS ****************************************
THIRD_PARTY_APPS = [
        'djangobower',
        'widget_tweaks',
        'django_nose',
        'rest_framework',
        'rest_framework_swagger',
        'django_extensions',
        ]

CUSTOM_APPS = [
        'landing',
        'main'
        ]


INSTALLED_APPS.extend(THIRD_PARTY_APPS)
INSTALLED_APPS.extend(CUSTOM_APPS)

#***************************** REST FRAMEWORK *************************
REST_FRAMEWORK = {
        # Use Django's standard `django.contrib.auth` permissions,
        # or allow read-only access for unauthenticated users.
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.IsAuthenticated'
            ],
        
        # Authenticatoin type
        'DEFAULT_AUTHENTICATION_CLASSES': [
            # Json web token (JWT)
            'rest_framework_jwt.authentication.JSONWebTokenAuthentication',

            # 'rest_framework.authentication.OAuth2Authentication',
            # TODO: Remove this authentication
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
            ],

        # Pagination
        # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',

        # MISC
        'PAGE_SIZE': 12,
        'TEST_REQUEST_DEFAULT_FORMAT': 'json',
        }

#***************************** JSON TOKEN AUTHENTICATION **********************
JWT_AUTH = {
        'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=60 * 30), # 30 mins
        'JWT_ALLOW_REFRESH': True, # Allow token refresh
        'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7), # Limit on token refresh
        }

#***************************** AUTHENTICATION *********************************
AUTH_USER_MODEL = 'main.NotepikUser'

AUTHENTICATION_BACKENDS = (
        'main.auth_backends.NotepikUserAuthBackend',
        'django.contrib.auth.backends.ModelBackend', # default auth backend
        )

#***************************** NOSE TEST **************************************
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

NOSE_ARGS = [
        # '--with-coverage', # activate coverage report
        # '--cover-html', # product html output for coverage
        # '--verbosity=2', # so verbose! :)
        '--cover-package=main,landing',
        ]


#***************************** LOGGING ******************************************
LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': "%(levelname)s : [%(asctime)s] : [%(name)s:%(lineno)s] : %(message)s",
                'datefmt': "%d/%b/%Y %H:%M:%S"
                },
            'simple': {
                'format': "%(levelname)s : %(message)s"
                }
            },
        'handlers': {
            'file': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',
                'maxBytes': 1024 * 1024 * 2, # 5mb,
                'backupCount': 5,
                'filename': 'logs/app.log',
                'formatter': 'verbose'
                }
            },
        'loggers': {
            # Uncomment this if you want django to log in our file
            # 'django': {
                # 'handlers': ['file'],
                # 'propagate': True,
                # 'level': 'DEBUG'
                # },
            'main': {
                'handlers': ['file'],
                'level': 'DEBUG'
                }
            }
        }



#***************************** BOWER ********************************************
BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR, 'components')

BOWER_INSTALLED_APPS = (
        'bootstrap',
        'normalize.css',
        )

#***************************** STATIC *******************************************
STATIC_URL = '/static/'

# Static root folder to use for collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Automatic find staticfiles
STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        'djangobower.finders.BowerFinder',
        )
